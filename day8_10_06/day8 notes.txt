what was the class.

1. if you are using heap consider using unique pointer or shared ptr.
2. get the context for threads.. more than the syntax.
2.1 justify why you need thread.
2.2 prove that the threads are sharing something that is not sharable.
2.3 need comes for synchronization..
2.4 usage point of view.. prefer the higher level abstractions you get like async
than using raw threads.

when we are using datastructures in any language.

1. what operations we are planning to perform.
2. picking one from the library.
3. respecting other person design..

sorting natural sort.. default order of sort.
runtime sort == some event triggering a sort..  -- you need to change the sorting criteria
function.



we dont need to sycnrhonize data if we are only reading.. True..

but we can have problems when somebody else is writing and we are reading..

reading X , x value is 4.  -- i have stale value..
somebody is writing X, he is changing the x value

callable scenarios = gap between assigning functions and calling functions,
in those cases consider using std::invoke..

std::variant..
you dont need use virtual functions, runtme polymorphism that is bad.. so consider
alternative.. this statement is debatable

if We X type, Y type and Z type at a given point of we want to use any std::variant
is useful.






std variant.

1. how you to able different data types
2. how are you checking for a particular type before invoking its function


------------------------

I have a pressureSensor
I have a temparatureSensor.

if I get pressuresensor, activatetpressuresnesor
if i get temperature, activetemparesensor.

-------------------------------------------

std::variant
std::any
std::optional







standard  talking to many entities.. headache.. that is important if you want wide acceptance
product -- is creativity of one company... generally this will be faster to make..


some X company or person needs a feature(Y) that wont be in the standard.
so he makes his own library and that has this feature and he starts using it
he can open source it so other people can use it.

this Y is a product, later on some time the standard guys will add Y with another name
as a feature to the standard, then Y need slowly will disappear.

only story regular expressions datastructures.. if you feel you are not ok with the performance
of the regular expression or ds given by the standard, then explore other libraries..

I know the programming language ?
how would you define "know"

1. documentation standard (1/5)
2. variable data type scope and casting rules (5/5)
3. runtime error handling and quantifying things(5/5)
4. string handing and date handling (2/5)
5. usage of ds (3/5)
6. know how to use profilers , unit testing tools, libraries.  ( 0.0001/5)

stringview is to represent an object in form of a string

Device with devicid, name and status.. how to represent this as a string, why
end users wil recognize only strings.


reinterpretcast..


you need to typecast some X type to Y type when X and Y is not related..


char *x = reinterpretcast<char*>(&d) ;//horrible.
char means byte 

int *x;
int on x is applicable only on what x points to.

11.45 
performance..
locks in threads.











summarize.

1. lamda expressions
2. templates.
specialization
you can pass n number to template 
3. how to talk about performance, 
good function design. and variable design.

variable design
1. content of data type
2. operations on data type.

4. overall intent is not to copy, not to allocate memory unnecessarily.

input this slide talks about..





retrun type

pass by value.. -- return type optimization..
reference or pointer. big headache is proving that reference or pointer is alive when
you come out of the function..

function declarations.

optional<Device> getDeviceDetails(const int deviceId);
optional<Device> updateDeviceDetailsupdateDeviceDeails(const Device &detailstobeupdated);
bool removeDeviceDetails(cosnt int deviceid);
Range getBasedOnStatus(const int status)
Range getBasedonLocationId(const int status)





how will getDeviceDetails communicate that deviceId is ot found or deviceId is found.

ghost tells dont write complicatedfunctions.. ghost(intent without details)
number of conditions in the function.. ceo jargon ..  cylomatic complexity




flow in the function is

1. number of conditions +1 -- optimal number..
normal flow in your program.

cache misses..
cachche hits..

tell me about your hardware and explain


ok nice English first measure.. how..
we can take old processor logic and apply it on the new processor.

behavior depending on context.

during runtime polymorphism we get a choice..

I dont know which object


PressureSensor p;
TemparateSensor t;
Sensor *s = &p;
s->activateSensor();
s = &t;
s->activateSensor. 

runtime polymorphism.

1. we have a virtual function call.
2. done by using base class pointer.
3. which object the base class pointer points to is not known at compile time.


programmer should be a slave to the project.

data locality.

class is for encapsulation
we are bindingdata and functions together.


forget oo use data oriented approaches..(nice jargon)














































